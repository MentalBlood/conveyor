import sqlalchemy.exc
import typing
from .. import Cache as Cache
from .....core import Item as Item, Transforms as Transforms
from ..Connect import Connect as Connect
from ..DbTableName import DbTableName as DbTableName
from .Columns import columns as columns

class EnumsTransform:
    connect: Connect
    enum_table: str
    cache_id: str
    @property
    def cache(self) -> Cache.Enums.Cache: ...
    def load(self) -> None: ...

class Int(EnumsTransform, Transforms.Trusted[Item.Metadata.Enumerable, int]):
    @property
    def table(self): ...
    def transform(self, i: Item.Metadata.Enumerable) -> int: ...
    def __invert__(self) -> String: ...

class String(EnumsTransform, Transforms.Trusted[int, Item.Metadata.Enumerable]):
    def transform(self, i: int) -> Item.Metadata.Enumerable: ...
    def __invert__(self) -> Int: ...

class Enum:
    type: Item.Type
    type_transform: Transforms.Safe[Item.Type, str]
    field: Item.Key
    enum_transform: Transforms.Safe[Item.Key, str]
    connect: Connect
    cache_id: str
    @property
    def db_type(self) -> str: ...
    @property
    def db_field(self) -> str: ...
    @property
    def table(self) -> sqlalchemy.Table: ...
    @property
    def column(self) -> sqlalchemy.Column[int]: ...
    def index(self, table: sqlalchemy.Table) -> sqlalchemy.Index[int]: ...
    def eq(self, description: Item.Metadata.Enumerable) -> sqlalchemy.sql.expression.ColumnElement[bool]: ...
    @typing.overload
    def convert(self, value: Item.Metadata.Enumerable) -> int: ...
    @typing.overload
    def convert(self, value: int | None) -> Item.Metadata.Enumerable: ...
    @property
    def Int(self) -> Int: ...
    @property
    def String(self) -> String: ...

class Enums:
    connect: Connect
    cache_id: str
    type_transform: Transforms.Safe[Item.Type, str]
    enum_transform: Transforms.Safe[Item.Key, str]
    def __getitem__(self, table_and_field: tuple[Item.Type, Item.Key]): ...
