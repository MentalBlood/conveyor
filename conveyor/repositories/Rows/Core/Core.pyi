import pydantic
import sqlalchemy.exc
import typing
from . import Cache as Cache, Fields as Fields
from ....core import Item as Item, Query as Query, Transforms as Transforms
from .DbEnumName import DbEnumName as DbEnumName
from .DbTableName import DbTableName as DbTableName
from .Enums import Enums as Enums
from .Row import Row as Row
from .Table import Table as Table

class Core:
    Item = Row
    db: sqlalchemy.engine.Engine
    connection: sqlalchemy.Connection | None
    table: Transforms.Safe[Item.Type, str]
    enum: Transforms.Safe[Item.Key, str]
    def append(self, row: Row) -> None: ...
    def __getitem__(self, query: Query) -> typing.Iterable[Row]: ...
    def __setitem__(self, old: Row, new: Row) -> None: ...
    def __delitem__(self, row: Row) -> None: ...
    def transaction(self) -> typing.Iterator[typing.Self]: ...
    def __contains__(self, row: Row) -> bool: ...
    def __len__(self) -> pydantic.NonNegativeInt: ...
    def clear(self) -> None: ...
