import abc
import pathlib
import pydantic
import typing
from ....core.Transforms import Transform as Transform

class Collision(Exception): ...

class Action(metaclass=abc.ABCMeta):
    path: pathlib.Path
    prepare_now: bool
    def __post_init__(self) -> None: ...
    @property
    @abc.abstractmethod
    def temp(self) -> pathlib.Path: ...
    @abc.abstractmethod
    def prepare(self) -> None: ...
    @abc.abstractmethod
    def commit(self) -> None: ...
    @abc.abstractmethod
    def rollback(self) -> None: ...

class Append(Action):
    data: pydantic.StrictBytes
    transforms: Transform[bytes, bytes]
    equal_path: typing.Callable[[bytes], pathlib.Path]
    equal_data: Transform[bytes, bytes]
    handle_collisions: bool
    @property
    def temp(self) -> pathlib.Path: ...
    @property
    def equal(self) -> typing.Self: ...
    def prepare(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class Delete(Action):
    @property
    def temp(self) -> pathlib.Path: ...
    def prepare(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class Transaction(list[Action]):
    Action = Action
    Append = Append
    Delete = Delete
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
