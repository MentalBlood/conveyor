import pathlib
import pydantic
import typing
from ....core import Transforms as Transforms
from .Pathify import Pathify as Pathify
from .Transaction import Transaction as Transaction
from conveyor.core.Item import Data as Data, Digest as Digest

class Core:
    Transforms = Transforms
    Pathify = Pathify
    root: pathlib.Path
    suffix: str
    prepare: Transforms.Transform[bytes, bytes]
    sidestep: Transforms.Transform[bytes, bytes]
    pathify: Transforms.Transform[Digest, pathlib.Path]
    transaction_: Transaction | None
    def path(self, digest: Digest) -> pathlib.Path: ...
    def append(self, data: Data) -> None: ...
    def __getitem__(self, digest: Digest) -> Data: ...
    def __delitem__(self, digest: Digest) -> None: ...
    def transaction(self) -> typing.Iterator[typing.Self]: ...
    def __contains__(self, digest: Digest) -> bool: ...
    def __len__(self) -> pydantic.NonNegativeInt: ...
    def clear(self) -> None: ...
