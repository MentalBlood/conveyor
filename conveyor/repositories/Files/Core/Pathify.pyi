import pathlib
import pydantic
import typing
from ....core.Item import Digest as Digest
from ....core.Transforms import Safe as Safe, Transform as Transform
from _typeshed import Incomplete

class Segment(Safe[Digest, typing.Sequence[str]]):
    def transform(self, i: Digest) -> typing.Sequence[str]: ...
    def __invert__(self) -> Desegment: ...

class Desegment(Safe[typing.Sequence[str], Digest]):
    def transform(self, i: typing.Sequence[str]) -> Digest: ...
    def __invert__(self) -> Segment: ...

Granulation: Incomplete

class Group(Safe[typing.Sequence[str], pathlib.Path]):
    granulation: Granulation
    def transform(self, i: typing.Sequence[str]) -> pathlib.Path: ...
    def __invert__(self) -> Ungroup: ...

class Ungroup(Safe[pathlib.Path, typing.Sequence[str]]):
    inverted_granulation: Granulation
    def transform(self, i: pathlib.Path) -> typing.Sequence[str]: ...
    def __invert__(self) -> Group: ...

class Pathify:
    def __new__(cls, granulation: typing.Callable[[pydantic.NonNegativeInt], pydantic.PositiveInt]) -> Transform[Digest, pathlib.Path]: ...
