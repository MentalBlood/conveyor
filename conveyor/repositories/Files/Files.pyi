import pydantic
import typing
from ...core import Item as Item, Part as Part, PartRepository as PartRepository, Query as Query
from .Core.Core import Core as Core

class Files(PartRepository):
    Core = Core
    files: Core
    def append(self, item: Item) -> None: ...
    def get(self, item_query: Query, accumulator: Part) -> typing.Iterable[Part]: ...
    def __delitem__(self, item: Item) -> None: ...
    def transaction(self) -> typing.Iterator[typing.Self]: ...
    def __contains__(self, item: Item) -> bool: ...
    def __len__(self) -> pydantic.NonNegativeInt: ...
    def clear(self) -> None: ...
