import abc
import pydantic
import typing
from ..Item import Item as Item
from ..Item.Part import Part as Part
from .Query import Query as Query

class PartRepository(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def append(self, item: Item) -> None: ...
    @abc.abstractmethod
    def get(self, item_query: Query, accumulator: Part) -> typing.Iterable[Part]: ...
    def __setitem__(self, old: Item, new: Item) -> None: ...
    @abc.abstractmethod
    def __delitem__(self, item: Item) -> None: ...
    @abc.abstractmethod
    def transaction(self) -> typing.Iterator[typing.Self]: ...
    @abc.abstractmethod
    def __contains__(self, item: Item) -> bool: ...
    @abc.abstractmethod
    def __len__(self) -> pydantic.NonNegativeInt: ...
    @abc.abstractmethod
    def clear(self) -> None: ...
