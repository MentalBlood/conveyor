import pydantic
import typing
from ..Item.Item import Item as Item
from ..Item.Part import Part as Part
from .PartRepository import PartRepository as PartRepository
from .Query import Query as Query
from _typeshed import Incomplete

Parts: Incomplete

class Repository:
    Parts = Parts
    parts: Parts
    transaction_: bool
    def parts_valid(cls, parts: Parts) -> Parts: ...
    def append(self, item: Item) -> None: ...
    def __getitem__(self, item_query: Query) -> typing.Iterable[Item]: ...
    def __setitem__(self, old: Item, new: Item, for_reserve: bool = ...) -> None: ...
    def __delitem__(self, item: Item) -> None: ...
    def transaction(self) -> typing.Iterator[typing.Self]: ...
    def __contains__(self, item: Item) -> bool: ...
    def __len__(self) -> pydantic.NonNegativeInt: ...
    def clear(self) -> None: ...
